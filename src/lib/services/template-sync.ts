import { prisma } from '@/lib/prisma/client'
import fs from 'fs'
import path from 'path'

/**
 * Synchronise le template professionnel du fichier HTML avec la base de donn√©es
 * S'ex√©cute au d√©marrage de l'application
 */
export async function syncProfessionalTemplate() {
  try {
    console.log('üîÑ Synchronisation du template professionnel...')
    
    // Lire le fichier HTML du template
    const templatePath = path.join(process.cwd(), 'templates', 'contrat-professionnel.html')
    
    if (!fs.existsSync(templatePath)) {
      console.warn('‚ö†Ô∏è  Fichier template professionnel non trouv√©:', templatePath)
      return
    }
    
    const htmlContent = fs.readFileSync(templatePath, 'utf-8')
    
    // V√©rifier si le template existe d√©j√†
    const existingTemplate = await prisma.contractTemplate.findFirst({
      where: {
        name: 'Contrat de Sous-Traitance Professionnel'
      }
    })
    
    if (existingTemplate) {
      // Mettre √† jour uniquement si le contenu a chang√©
      if (existingTemplate.htmlContent !== htmlContent) {
        await prisma.contractTemplate.update({
          where: {
            id: existingTemplate.id
          },
          data: {
            htmlContent,
            description: 'Mod√®le professionnel de contrat de sous-traitance avec toutes les clauses l√©gales et signatures √©lectroniques',
            updatedAt: new Date()
          }
        })
        console.log('‚úÖ Template professionnel mis √† jour dans la base de donn√©es')
      } else {
        console.log('‚úÖ Template professionnel d√©j√† √† jour')
      }
    } else {
      // Cr√©er le nouveau template
      const template = await prisma.contractTemplate.create({
        data: {
          name: 'Contrat de Sous-Traitance Professionnel',
          description: 'Mod√®le professionnel de contrat de sous-traitance avec toutes les clauses l√©gales et signatures √©lectroniques',
          htmlContent,
          isActive: true
        }
      })
      console.log('‚úÖ Template professionnel cr√©√© avec ID:', template.id)
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de la synchronisation du template:', error)
    // Ne pas faire √©chouer le d√©marrage de l'application
  } finally {
    await prisma.$disconnect()
  }
}

/**
 * R√©cup√®re le template actif depuis la base de donn√©es
 */
export async function getActiveTemplate() {
  try {
    const template = await prisma.contractTemplate.findFirst({
      where: {
        isActive: true
      }
    })
    
    return template
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration du template actif:', error)
    return null
  } finally {
    await prisma.$disconnect()
  }
}

/**
 * Exporte le template actif vers un fichier HTML
 */
export async function exportActiveTemplate(outputPath: string) {
  try {
    const template = await getActiveTemplate()
    
    if (!template) {
      throw new Error('Aucun template actif trouv√©')
    }
    
    fs.writeFileSync(outputPath, template.htmlContent, 'utf-8')
    console.log('‚úÖ Template export√© vers:', outputPath)
    
    return template
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'exportation du template:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

