import { ragService } from '../rag/rag-service';
import { vectorStore } from '../rag/vector-store';

// T√¢che d'indexation compl√®te du syst√®me RAG
export async function fullRAGIndexing() {
  try {
    console.log('üîÑ [T√ÇCHE PLANIFI√âE] D√©but de l\'indexation RAG automatique');
    
    // V√©rifier la sant√© du syst√®me avant l'indexation
    const stats = await vectorStore.getStats();
    console.log(`üìä Documents actuels: ${stats.totalDocuments}`);
    
    // Effectuer l'indexation compl√®te
    await ragService.indexAllChantiers();
    
    // V√©rifier le r√©sultat
    const newStats = await vectorStore.getStats();
    console.log(`‚úÖ [T√ÇCHE PLANIFI√âE] Indexation termin√©e - ${newStats.totalDocuments} documents index√©s`);
    
    return {
      success: true,
      documentsBefore: stats.totalDocuments,
      documentsAfter: newStats.totalDocuments,
      timestamp: new Date().toISOString()
    };
    
  } catch (error) {
    console.error('‚ùå [T√ÇCHE PLANIFI√âE] Erreur lors de l\'indexation RAG:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Erreur inconnue',
      timestamp: new Date().toISOString()
    };
  }
}

// T√¢che d'indexation incr√©mentale (seulement les nouveaux/modifi√©s)
export async function incrementalRAGIndexing() {
  try {
    console.log('üîÑ [T√ÇCHE PLANIFI√âE] D√©but de l\'indexation RAG incr√©mentale');
    
    const { prisma } = await import('@/lib/prisma/client');
    
    // Trouver les chantiers modifi√©s dans les derni√®res 24h
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    
    const chantiersModifies = await prisma.chantier.findMany({
      where: {
        OR: [
          { updatedAt: { gte: yesterday } },
          { notes: { some: { updatedAt: { gte: yesterday } } } },
          { documents: { some: { updatedAt: { gte: yesterday } } } }
        ]
      },
      include: {
        client: true,
        etatsAvancement: {
          include: {
            lignes: true,
            avenants: true
          }
        },
        commandes: {
          include: {
            lignes: true
          }
        },
        notes: true,
        documents: true,
        receptionsChantier: {
          include: {
            remarques: true
          }
        }
      }
    });
    
    console.log(`üìù ${chantiersModifies.length} chantiers modifi√©s trouv√©s`);
    
    // R√©indexer seulement les chantiers modifi√©s
    for (const chantier of chantiersModifies) {
      await ragService.indexChantier(chantier);
      
      // Indexer les notes, documents, etc.
      for (const note of chantier.notes) {
        await ragService.indexNote(note, chantier);
      }
      
      for (const document of chantier.documents) {
        await ragService.indexDocumentAttache(document, chantier);
      }
      
      for (const reception of chantier.receptionsChantier) {
        for (const remarque of reception.remarques) {
          await ragService.indexRemarqueReception(remarque, chantier);
        }
      }
    }
    
    console.log(`‚úÖ [T√ÇCHE PLANIFI√âE] Indexation incr√©mentale termin√©e`);
    
    return {
      success: true,
      chantiersIndexes: chantiersModifies.length,
      timestamp: new Date().toISOString()
    };
    
  } catch (error) {
    console.error('‚ùå [T√ÇCHE PLANIFI√âE] Erreur lors de l\'indexation incr√©mentale:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Erreur inconnue',
      timestamp: new Date().toISOString()
    };
  }
}

// Cette fonction peut √™tre appel√©e par un planificateur de t√¢ches comme node-cron


