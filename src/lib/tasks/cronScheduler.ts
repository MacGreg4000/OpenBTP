import cron, { ScheduledTask } from 'node-cron';
import { fullRAGIndexing, incrementalRAGIndexing } from './ragIndexingTasks';

// Planificateur de t√¢ches pour l'indexation RAG
export class RAGIndexingScheduler {
  private static instance: RAGIndexingScheduler;
  private tasks: Map<string, ScheduledTask> = new Map();

  private constructor() {}

  static getInstance(): RAGIndexingScheduler {
    if (!RAGIndexingScheduler.instance) {
      RAGIndexingScheduler.instance = new RAGIndexingScheduler();
    }
    return RAGIndexingScheduler.instance;
  }

  // D√©marrer l'indexation compl√®te quotidienne
  startDailyFullIndexing(time: string = '02:00') {
    const [hour, minute] = time.split(':');
    const cronExpression = `${minute} ${hour} * * *`; // Tous les jours √† l'heure sp√©cifi√©e
    
    console.log(`üïê [CRON] Planification de l'indexation compl√®te RAG: ${cronExpression}`);
    
    const task = cron.schedule(cronExpression, async () => {
      console.log('‚è∞ [CRON] Ex√©cution de l\'indexation compl√®te RAG');
      await fullRAGIndexing();
    }, {
      timezone: "Europe/Brussels"
    });

    this.tasks.set('daily-full', task);
    task.start();
    
    return task;
  }

  // D√©marrer l'indexation incr√©mentale toutes les 6 heures
  startIncrementalIndexing() {
    const cronExpression = '0 */6 * * *'; // Toutes les 6 heures
    
    console.log(`üïê [CRON] Planification de l'indexation incr√©mentale RAG: ${cronExpression}`);
    
    const task = cron.schedule(cronExpression, async () => {
      console.log('‚è∞ [CRON] Ex√©cution de l\'indexation incr√©mentale RAG');
      await incrementalRAGIndexing();
    }, {
      timezone: "Europe/Brussels"
    });

    this.tasks.set('incremental', task);
    task.start();
    
    return task;
  }

  // D√©marrer l'indexation incr√©mentale toutes les heures (pour les environnements tr√®s actifs)
  startHourlyIndexing() {
    const cronExpression = '0 * * * *'; // Toutes les heures
    
    console.log(`üïê [CRON] Planification de l'indexation horaire RAG: ${cronExpression}`);
    
    const task = cron.schedule(cronExpression, async () => {
      console.log('‚è∞ [CRON] Ex√©cution de l\'indexation horaire RAG');
      await incrementalRAGIndexing();
    }, {
      timezone: "Europe/Brussels"
    });

    this.tasks.set('hourly', task);
    task.start();
    
    return task;
  }

  // Arr√™ter une t√¢che sp√©cifique
  stopTask(taskName: string) {
    const task = this.tasks.get(taskName);
    if (task) {
      task.stop();
      this.tasks.delete(taskName);
      console.log(`üõë [CRON] T√¢che ${taskName} arr√™t√©e`);
    }
  }

  // Arr√™ter toutes les t√¢ches
  stopAllTasks() {
    this.tasks.forEach((task, name) => {
      task.stop();
      console.log(`üõë [CRON] T√¢che ${name} arr√™t√©e`);
    });
    this.tasks.clear();
  }

  // Obtenir le statut des t√¢ches
  getTasksStatus() {
    const status: Record<string, { running: boolean; nextRun?: Date }> = {};
    
    this.tasks.forEach((task, name) => {
      status[name] = {
        running: true, // Les t√¢ches sont consid√©r√©es comme running si elles sont dans la map
        nextRun: undefined // Pas de prochaine ex√©cution disponible
      };
    });
    
    return status;
  }

  // D√©marrer toutes les t√¢ches par d√©faut
  startDefaultTasks() {
    console.log('üöÄ [CRON] D√©marrage des t√¢ches RAG par d√©faut');
    
    // Indexation compl√®te tous les jours √† 2h du matin
    this.startDailyFullIndexing('02:00');
    
    // Indexation incr√©mentale toutes les 6 heures
    this.startIncrementalIndexing();
    
    console.log('‚úÖ [CRON] Toutes les t√¢ches RAG d√©marr√©es');
  }
}

// Instance singleton
export const ragScheduler = RAGIndexingScheduler.getInstance();


