import { NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma/client'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'

export async function GET(
  request: Request,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params
    const session = await getServerSession(authOptions)
    if (!session) {
      return NextResponse.json(
        { error: 'Non autoris√©' },
        { status: 401 }
      )
    }

    const bonRegieId = parseInt(id)
    if (isNaN(bonRegieId)) {
      return NextResponse.json(
        { error: 'ID invalide' },
        { status: 400 }
      )
    }

    // R√©cup√©rer le bon de r√©gie avec l'ID sp√©cifi√©
    const bonRegie = await prisma.bonRegie.findUnique({
      where: { id: bonRegieId }
    })

    // V√©rifier si le bon de r√©gie existe
    if (!bonRegie) {
      return NextResponse.json(
        { error: 'Bon de r√©gie non trouv√©' },
        { status: 404 }
      )
    }

    return NextResponse.json(bonRegie)
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration du bon de r√©gie:', error)
    return NextResponse.json(
      { error: 'Erreur lors de la r√©cup√©ration du bon de r√©gie' },
      { status: 500 }
    )
  }
}

// DELETE /api/bon-regie/[id] - Supprimer un bon de r√©gie
export async function DELETE(
  request: Request,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params
    console.log(`üóëÔ∏è Tentative de suppression du bon de r√©gie ${id}`)
    
    const session = await getServerSession(authOptions)
    if (!session) {
      console.log('‚ùå Session non trouv√©e')
      return NextResponse.json(
        { error: 'Non autoris√©' },
        { status: 401 }
      )
    }

    console.log(`üë§ Utilisateur: ${session.user.email}, R√¥le: ${session.user.role}`)

    // V√©rifier que l'utilisateur est un administrateur
    if (session.user.role !== 'ADMIN') {
      console.log(`‚ùå Tentative de suppression par un utilisateur non-admin: ${session.user.email}`)
      return NextResponse.json(
        { error: 'Seuls les administrateurs peuvent supprimer des bons de r√©gie' },
        { status: 403 }
      )
    }

    const bonRegieId = parseInt(id)
    if (isNaN(bonRegieId)) {
      return NextResponse.json(
        { error: 'ID invalide' },
        { status: 400 }
      )
    }

    // V√©rifier si le bon de r√©gie existe
    const bonRegie = await prisma.bonRegie.findUnique({
      where: { id: bonRegieId }
    })

    if (!bonRegie) {
      console.log(`‚ùå Bon de r√©gie ${bonRegieId} non trouv√©`)
      return NextResponse.json(
        { error: 'Bon de r√©gie non trouv√©' },
        { status: 404 }
      )
    }

    console.log(`üìã Bon de r√©gie trouv√©: ${bonRegie.description}`)

    // Supprimer le bon de r√©gie
    await prisma.bonRegie.delete({
      where: { id: bonRegieId }
    })
    
    console.log(`‚úÖ Bon de r√©gie ${bonRegieId} supprim√© avec succ√®s par ${session.user.email}`)
    return new NextResponse(null, { status: 204 })
  } catch (error) {
    console.error('‚ùå Erreur lors de la suppression du bon de r√©gie:', error)
    return NextResponse.json(
      { error: 'Erreur lors de la suppression du bon de r√©gie' },
      { status: 500 }
    )
  }
} 