generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native","debian-openssl-1.1.x","debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Settings {
  id        Int      @id @default(1)
  logo      String?
  updatedAt DateTime @updatedAt

  @@map("settings")
}

model AdminTaskType {
  id        String   @id @default(uuid())
  taskType  String   @unique
  label     String
  category  String   @default("administrative")
  isActive  Boolean  @default(true)
  ordre     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admin_task_types")
}

model admintask {
  id          Int       @id @default(autoincrement())
  chantierId  String
  completedBy String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  completed   Boolean   @default(false)
  completedAt DateTime?
  taskType    String
  title       String?
  chantier    Chantier  @relation(fields: [chantierId], references: [chantierId], map: "AdminTask_chantierId_fkey")
  user        User?     @relation(fields: [completedBy], references: [id], map: "AdminTask_completedBy_fkey")

  @@unique([chantierId, taskType], map: "AdminTask_chantierId_taskType_key")
  @@index([chantierId], map: "AdminTask_chantierId_idx")
  @@index([completedBy], map: "AdminTask_completedBy_idx")
}

model pret {
  id                  String      @id
  machineId           String
  userId              String
  datePret            DateTime    @default(now())
  dateRetourPrevue    DateTime
  dateRetourEffective DateTime?
  statut              pret_statut @default(EN_COURS)
  commentaire         String?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime
  emprunteur          String
  machine             Machine     @relation(fields: [machineId], references: [id], map: "Pret_machineId_fkey")
  user                User        @relation(fields: [userId], references: [id], map: "Pret_userId_fkey")

  @@index([machineId], map: "Pret_machineId_idx")
  @@index([userId], map: "Pret_userId_idx")
}

model soustraitant {
  id                           String                         @id
  nom                          String
  email                        String                         @unique(map: "SousTraitant_email_key")
  contact                      String?
  adresse                      String?
  telephone                    String?
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime
  tva                          String?
  actif                        Boolean                        @default(true)
  commandes                    CommandeSousTraitant[]
  metresSoustraitant           MetreSoustraitant[]
  contrats                     contrat[]
  soustraitant_etat_avancement soustraitant_etat_avancement[]
  soustraitantPINs             SousTraitantPIN[]
  
  // Relations SAV
  ticketsSAVAssignes       TicketSAV[]      @relation("TicketsSAVSousTraitant")
  // Planning ressources
  taskAssignments          TaskSousTraitant[]
}

model contrat {
  id             String       @id @default(cuid())
  soustraitantId String
  url            String
  dateGeneration DateTime     @default(now())
  dateSignature  DateTime?
  estSigne       Boolean      @default(false)
  token          String?      @unique
  soustraitant   soustraitant @relation(fields: [soustraitantId], references: [id], onDelete: Cascade)

  @@index([soustraitantId])
}

model FicheTechnique {
  id            String   @id @default(uuid())
  titre         String
  categorie     String
  sousCategorie String?
  fichierUrl    String
  description   String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  referenceCSC  String?

  @@map("fiches_techniques")
}

model Commande {
  id             Int             @id @default(autoincrement())
  chantierId     String
  clientId       String?
  dateCommande   DateTime        @default(now())
  reference      String?
  tauxTVA        Float           @default(20)
  sousTotal      Float           @default(0)
  totalOptions   Float           @default(0)
  tva            Float           @default(0)
  total          Float           @default(0)
  statut         String          @default("BROUILLON")
  estVerrouillee Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  Chantier       Chantier        @relation("CommandeToChantier", fields: [chantierId], references: [id])
  lignes         LigneCommande[]

  @@index([chantierId], map: "Commande_chantierId_idx")
  @@index([clientId], map: "Commande_clientId_idx")
  @@map("commande")
}

model LigneCommande {
  id           Int      @id @default(autoincrement())
  commandeId   Int
  ordre        Int
  article      String
  description  String   @db.Text
  type         String   @default("QP")
  unite        String
  prixUnitaire Float
  quantite     Float
  total        Float
  estOption    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  commande     Commande @relation(fields: [commandeId], references: [id], onDelete: Cascade)

  @@index([commandeId], map: "LigneCommande_commandeId_idx")
  @@map("lignecommande")
}

model EtatAvancement {
  id                           Int                            @id @default(autoincrement())
  chantierId                   String
  numero                       Int
  date                         DateTime                       @default(now())
  commentaires                 String?                        @db.Text
  estFinalise                  Boolean                        @default(false)
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @updatedAt
  createdBy                    String
  mois                         String?
  avenants                     AvenantEtatAvancement[]
  Chantier                     Chantier                       @relation(fields: [chantierId], references: [id])
  lignes                       LigneEtatAvancement[]
  soustraitant_etat_avancement soustraitant_etat_avancement[]

  @@unique([chantierId, numero])
  @@index([chantierId])
  @@map("etat_avancement")
}

model LigneEtatAvancement {
  id                 Int            @id @default(autoincrement())
  etatAvancementId   Int
  ligneCommandeId    Int
  quantitePrecedente Float          @default(0)
  quantiteActuelle   Float          @default(0)
  quantiteTotale     Float          @default(0)
  montantPrecedent   Float          @default(0)
  montantActuel      Float          @default(0)
  montantTotal       Float          @default(0)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  article            String
  description        String         @db.Text
  prixUnitaire       Float
  quantite           Float
  type               String
  unite              String
  etatAvancement     EtatAvancement @relation(fields: [etatAvancementId], references: [id], onDelete: Cascade)

  @@index([etatAvancementId])
  @@map("ligne_etat_avancement")
}

model AvenantEtatAvancement {
  id                 Int            @id @default(autoincrement())
  etatAvancementId   Int
  article            String
  description        String         @db.Text
  type               String
  unite              String
  prixUnitaire       Float
  quantite           Float
  quantitePrecedente Float          @default(0)
  quantiteActuelle   Float          @default(0)
  quantiteTotale     Float          @default(0)
  montantPrecedent   Float          @default(0)
  montantActuel      Float          @default(0)
  montantTotal       Float          @default(0)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  etatAvancement     EtatAvancement @relation(fields: [etatAvancementId], references: [id], onDelete: Cascade)

  @@index([etatAvancementId])
  @@map("avenant_etat_avancement")
}

model companysettings {
  id            String   @id @default("COMPANY_SETTINGS")
  name          String
  address       String
  zipCode       String
  city          String
  phone         String
  email         String
  tva           String
  logo          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  emailFrom     String?
  emailFromName String?
  emailHost     String?
  emailPassword String?
  emailPort     String?
  emailSecure   Boolean? @default(false)
  emailUser     String?
  iban          String?
}

model CommandeSousTraitant {
  id                           Int                            @id @default(autoincrement())
  chantierId                   String
  soustraitantId               String
  dateCommande                 DateTime                       @default(now())
  reference                    String?
  tauxTVA                      Float                          @default(0)
  sousTotal                    Float                          @default(0)
  tva                          Float                          @default(0)
  total                        Float                          @default(0)
  statut                       String                         @default("BROUILLON")
  estVerrouillee               Boolean                        @default(false)
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @updatedAt
  Chantier                     Chantier                       @relation(fields: [chantierId], references: [id])
  soustraitant                 soustraitant                   @relation(fields: [soustraitantId], references: [id], onDelete: Cascade)
  lignes                       LigneCommandeSousTraitant[]
  soustraitant_etat_avancement soustraitant_etat_avancement[]
  metresSoustraitant           MetreSoustraitant[]

  @@index([chantierId])
  @@index([soustraitantId])
  @@map("commande_soustraitant")
}

model LigneCommandeSousTraitant {
  id                     Int                  @id @default(autoincrement())
  commandeSousTraitantId Int
  ordre                  Int
  article                String
  description            String               @db.Text
  type                   String               @default("QP")
  unite                  String
  prixUnitaire           Float
  quantite               Float
  total                  Float
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  commandeSousTraitant   CommandeSousTraitant @relation(fields: [commandeSousTraitantId], references: [id], onDelete: Cascade)

  @@index([commandeSousTraitantId])
  @@map("ligne_commande_soustraitant")
}

model avenant_soustraitant_etat_avancement {
  id                           Int                          @id @default(autoincrement())
  soustraitantEtatAvancementId Int
  article                      String
  description                  String                       @db.Text
  type                         String
  unite                        String
  prixUnitaire                 Float
  quantite                     Float
  quantitePrecedente           Float                        @default(0)
  quantiteActuelle             Float                        @default(0)
  quantiteTotale               Float                        @default(0)
  montantPrecedent             Float                        @default(0)
  montantActuel                Float                        @default(0)
  montantTotal                 Float                        @default(0)
  createdAt                    DateTime                     @default(now())
  updatedAt                    DateTime
  soustraitant_etat_avancement soustraitant_etat_avancement @relation(fields: [soustraitantEtatAvancementId], references: [id], onDelete: Cascade)

  @@index([soustraitantEtatAvancementId])
}

model ligne_soustraitant_etat_avancement {
  id                           Int                          @id @default(autoincrement())
  soustraitantEtatAvancementId Int
  article                      String
  description                  String                       @db.Text
  type                         String
  unite                        String
  prixUnitaire                 Float
  quantite                     Float
  quantitePrecedente           Float                        @default(0)
  quantiteActuelle             Float                        @default(0)
  quantiteTotale               Float                        @default(0)
  montantPrecedent             Float                        @default(0)
  montantActuel                Float                        @default(0)
  montantTotal                 Float                        @default(0)
  createdAt                    DateTime                     @default(now())
  updatedAt                    DateTime
  soustraitant_etat_avancement soustraitant_etat_avancement @relation(fields: [soustraitantEtatAvancementId], references: [id], onDelete: Cascade)

  @@index([soustraitantEtatAvancementId])
}

model soustraitant_etat_avancement {
  id                                   Int                                    @id @default(autoincrement())
  soustraitantId                       String
  numero                               Int
  date                                 DateTime                               @default(now())
  commentaires                         String?                                @db.Text
  estFinalise                          Boolean                                @default(false)
  createdAt                            DateTime                               @default(now())
  updatedAt                            DateTime                               @updatedAt
  commandeSousTraitantId               Int?
  etatAvancementId                     Int
  avenant_soustraitant_etat_avancement avenant_soustraitant_etat_avancement[]
  ligne_soustraitant_etat_avancement   ligne_soustraitant_etat_avancement[]
  photos                               photo_soustraitant_etat_avancement[]
  commande_soustraitant                CommandeSousTraitant?                  @relation(fields: [commandeSousTraitantId], references: [id])
  etat_avancement                      EtatAvancement                         @relation(fields: [etatAvancementId], references: [id], onDelete: Cascade)
  soustraitant                         soustraitant                           @relation(fields: [soustraitantId], references: [id], onDelete: Cascade)

  @@unique([etatAvancementId, soustraitantId, numero])
  @@index([commandeSousTraitantId])
  @@index([etatAvancementId])
  @@index([soustraitantId])
}

model photo_soustraitant_etat_avancement {
  id                           Int                          @id @default(autoincrement())
  soustraitantEtatAvancementId Int
  url                          String
  description                  String?
  dateAjout                    DateTime                     @default(now())
  soustraitant_etat_avancement soustraitant_etat_avancement @relation(fields: [soustraitantEtatAvancementId], references: [id], onDelete: Cascade)

  @@index([soustraitantEtatAvancementId])
}

model Depense {
  id           String   @id @default(uuid())
  chantierId   String
  date         DateTime @default(now())
  montant      Float
  description  String   @db.Text
  categorie    String
  fournisseur  String?
  reference    String?
  justificatif String?
  createdBy    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([chantierId])
  @@index([createdBy])
  @@map("depense")
}

model UserNotes {
  id          Int      @id @default(autoincrement())
  userId      String   @unique
  content     String   @db.Text
  stickyNotes String?  @db.Text
  todos       String?  @db.Text
  mode        String   @default("notes")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("user_notes")
}

model Rack {
  id           String        @id @default(uuid())
  nom          String
  position     String
  lignes       Int
  colonnes     Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  emplacements Emplacement[]

  @@map("rack")
}

model Emplacement {
  id        String     @id @default(uuid())
  rackId    String
  ligne     Int
  colonne   Int
  codeQR    String     @unique
  statut    String     @default("libre")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  rack      Rack       @relation(fields: [rackId], references: [id], onDelete: Cascade)
  materiaux Materiau[]

  @@unique([rackId, ligne, colonne])
  @@index([rackId])
  @@map("emplacement")
}

model Materiau {
  id            String       @id @default(uuid())
  nom           String
  description   String?      @db.Text
  quantite      Int          @default(1)
  codeQR        String?      @unique
  emplacementId String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  emplacement   Emplacement? @relation(fields: [emplacementId], references: [id])

  @@index([emplacementId])
  @@map("materiau")
}

model Avenant {
  id          Int      @id @default(autoincrement())
  numero      Int
  date        DateTime @default(now())
  description String?
  chantierId  String
  marcheId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  Chantier    Chantier @relation(fields: [chantierId], references: [chantierId])
  Marche      Marche   @relation(fields: [marcheId], references: [id])

  @@unique([chantierId, numero])
  @@index([marcheId], map: "Avenant_marcheId_fkey")
}

model Chantier {
  id                   String                 @id @default(cuid())
  chantierId           String                 @unique
  numeroIdentification String?                @unique
  nomChantier          String
  dateCommencement     DateTime?
  dateFinPrevue        DateTime?
  etatChantier         String?
  clientAdresse        String?
  clientEmail          String?
  clientNom            String?
  clientTelephone      String?
  clientId             String?
  contactId            String?
  adresseChantier      String?
  avancement           Float?
  budget               Float?
  couleur              String?
  dateAcceptation      DateTime?
  dateDebutPreparation DateTime?
  dateFinEffective     DateTime?
  description          String?                @db.Text
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  dureeEnJours         Int?
  dateDebut            DateTime?
  dateFinReelle        DateTime?
  statut               String                 @default("A_VENIR")
  typeDuree            String                 @default("CALENDRIER")
  villeChantier        String?
  avenants             Avenant[]
  client               Client?                @relation(fields: [clientId], references: [id])
  contact              Contact?               @relation(fields: [contactId], references: [id])
  documents            Document[]
  etats                Etat[]
  ligneMarche          LigneMarche[]          @relation("ChantierToLigneMarche")
  marches              Marche?
  notes                Note[]
  taches               Tache[]
  admintasks           admintask[]
  bonsRegie            BonRegie[]
  commandes            Commande[]             @relation("CommandeToChantier")
  commandeSousTraitant CommandeSousTraitant[]
  metresSoustraitant   MetreSoustraitant[]
  etatsAvancement      EtatAvancement[]
  receptionsChantier   ReceptionChantier[]
  // Planning ressources
  tasks                Task[]
  
  // Relations SAV
  ticketsSAV               TicketSAV[]      @relation("ChantierTicketsSAV")
  
  // Journal ouvrier
  journalEntries           JournalOuvrier[] @relation("JournalChantier")
  
  // Photos externes
  photosExternes           PhotoExterne[]
  
  // Choix clients
  choixClients             ChoixClient[]

  @@index([clientId])
  @@index([contactId])
}

model Client {
  id        String     @id
  nom       String
  email     String?
  adresse   String?
  telephone String?
  numeroTva String?
  createdAt DateTime   @default(now())
  updatedAt DateTime
  Chantier  Chantier[]
  contacts  Contact[]
}

model Contact {
  id        String     @id @default(cuid())
  prenom    String
  nom       String
  email     String?
  telephone String?
  fonction  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  clientId  String
  notes     String?    @db.Text
  Chantier  Chantier[]
  client    Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId], map: "contacts_clientId_fkey")
  @@map("contacts")
}

model Document {
  id               Int                 @id @default(autoincrement())
  nom              String
  type             String
  url              String
  taille           Int
  mimeType         String
  chantierId       String?
  createdBy        String
  createdAt        DateTime            @default(now())
  updatedAt        DateTime
  metadata         Json?
  estPlan          Boolean             @default(false)
  chantier         Chantier?           @relation(fields: [chantierId], references: [chantierId], onDelete: Cascade)
  User             User                @relation(fields: [createdBy], references: [id])
  remarquesSurPlan RemarqueReception[] @relation("RemarqueSurPlan")
  tags             Tag[]               @relation("DocumentTags")

  @@index([chantierId])
  @@index([createdBy])
  @@map("Document")
}

model DocumentOuvrier {
  id             String    @id
  nom            String
  type           String
  url            String
  dateExpiration DateTime?
  ouvrierId      String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime
  Ouvrier        Ouvrier   @relation(fields: [ouvrierId], references: [id], onDelete: Cascade)

  @@index([ouvrierId])
}

model Etat {
  id         Int         @id @default(autoincrement())
  numero     Int
  date       DateTime
  chantierId String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime
  Chantier   Chantier    @relation(fields: [chantierId], references: [chantierId], onDelete: Cascade)
  LigneEtat  LigneEtat[]

  @@unique([chantierId, numero])
}

model LigneEtat {
  id            Int         @id @default(autoincrement())
  etatId        Int
  ligneMarcheId Int
  quantite      Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  Etat          Etat        @relation(fields: [etatId], references: [id], onDelete: Cascade)
  LigneMarche   LigneMarche @relation(fields: [ligneMarcheId], references: [id])

  @@index([etatId])
  @@index([ligneMarcheId])
}

model LigneMarche {
  id           Int         @id @default(autoincrement())
  article      Int
  descriptif   String
  unite        String
  quantite     Float
  prixUnitaire Float
  marcheId     Int
  chantierId   String?
  LigneEtat    LigneEtat[]
  Chantier     Chantier?   @relation("ChantierToLigneMarche", fields: [chantierId], references: [id])
  Marche       Marche      @relation("LigneMarcheToMarche", fields: [marcheId], references: [id], onDelete: Cascade)

  @@index([marcheId])
  @@index([chantierId], map: "LigneMarche_chantierId_fkey")
}

model Machine {
  id           String         @id
  nom          String
  modele       String
  numeroSerie  String?
  localisation String
  statut       Machine_statut @default(DISPONIBLE)
  dateAchat    DateTime?
  qrCode       String         @unique
  commentaire  String?        @db.Text
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  pret         pret[]
}

model Marche {
  id           Int           @id @default(autoincrement())
  chantierId   String        @unique
  dateImport   DateTime      @default(now())
  montantTotal Float
  Avenant      Avenant[]
  LigneMarche  LigneMarche[] @relation("LigneMarcheToMarche")
  Chantier     Chantier      @relation(fields: [chantierId], references: [chantierId])
}

model Note {
  id         Int      @id @default(autoincrement())
  chantierId String
  contenu    String   @db.Text
  createdBy  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  Chantier   Chantier @relation(fields: [chantierId], references: [chantierId])
  User       User     @relation(fields: [createdBy], references: [id])

  @@index([chantierId])
  @@index([createdBy])
}

model Ouvrier {
  id              String            @id
  nom             String
  prenom          String
  email           String?
  telephone       String?
  dateEntree      DateTime
  poste           String
  sousTraitantId  String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  DocumentOuvrier DocumentOuvrier[]

  @@index([sousTraitantId])
}

// Nouveaux ouvriers internes (différents des ouvriers des sous-traitants)
model OuvrierInterne {
  id         String   @id @default(cuid())
  nom        String
  prenom     String
  email      String?
  telephone  String?
  poste      String?
  actif      Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations SAV
  ticketsAssignes TicketSAV[] @relation("TicketsSAVOuvrierInterne")
  // Planning ressources
  taskAssignments TaskOuvrierInterne[]
  // Journal
  journalEntries JournalOuvrier[] @relation("JournalOuvrier")

  @@map("ouvrier_interne")
}

// Accès public par PIN pour ouvriers internes et sous-traitants
enum PublicSubjectType {
  OUVRIER_INTERNE
  SOUSTRAITANT
}

model PublicAccessPIN {
  id           String            @id @default(uuid())
  subjectType  PublicSubjectType
  subjectId    String
  codePIN      String            @unique
  estActif     Boolean           @default(true)
  expiresAt    DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@index([subjectType, subjectId])
  @@map("public_access_pin")
}

model Tache {
  id          String    @id
  label       String
  completed   Boolean   @default(false)
  completedAt DateTime?
  chantierId  String
  category    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  Chantier    Chantier  @relation(fields: [chantierId], references: [chantierId], onDelete: Cascade)

  @@unique([chantierId, id])
}

model User {
  id                 String              @id
  email              String              @unique
  password           String
  role               User_role           @default(USER)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime
  name               String?
  Document           Document[]
  Note               Note[]
  admintask          admintask[]
  sentMessages       ChatMessage[]
  chatParticipations ChatParticipant[]
  pret               pret[]
  receptionsChantier ReceptionChantier[]
  remarquesCrees     RemarqueReception[] @relation("RemarquesCreesParUser")
  ragConversations   ragConversation[]
  accounts           Account[]
  sessions           Session[]
  
  // Relations SAV
  ticketsSAVCrees           TicketSAV[]      @relation("TicketsSAVCreatedBy")
  ticketsSAVAssignes        TicketSAV[]      @relation("TicketsSAVTechnicien")
  interventionsSAV          InterventionSAV[] @relation("InterventionsSAVTechnicien")
  documentsSAVUploades      DocumentSAV[]    @relation("DocumentsSAVUploadedBy")
  photosSAVPrises           PhotoSAV[]       @relation("PhotosSAVPrisesPar")
  photosInterventionSAVPrises PhotoInterventionSAV[] @relation("PhotosInterventionSAVPrisesPar")
  commentairesSAV           CommentaireSAV[] @relation("CommentairesSAVAuteur")
  
  // Choix clients
  choixClients              ChoixClient[]
}

model BonRegie {
  id                Int       @id @default(autoincrement())
  dates             String
  client            String
  nomChantier       String
  description       String
  tempsPreparation  Float?
  tempsTrajets      Float?
  tempsChantier     Float?
  nombreTechniciens Int?
  materiaux         String?
  nomSignataire     String
  signature         String    @db.Text
  dateSignature     DateTime
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  chantierId        String?
  chantier          Chantier? @relation(fields: [chantierId], references: [chantierId])

  @@index([chantierId])
  @@map("bonRegie")
}

model ReceptionChantier {
  id               String              @id @default(uuid())
  chantierId       String
  dateCreation     DateTime            @default(now())
  dateLimite       DateTime
  codePIN          String?
  estFinalise      Boolean             @default(false)
  createdBy        String
  updatedAt        DateTime            @updatedAt
  chantier         Chantier            @relation(fields: [chantierId], references: [chantierId], onDelete: Cascade)
  user             User                @relation(fields: [createdBy], references: [id])
  remarques        RemarqueReception[]
  soustraitantPINs SousTraitantPIN[]

  @@index([chantierId])
  @@index([createdBy])
  @@map("reception_chantier")
}

model RemarqueReception {
  id               String            @id @default(uuid())
  receptionId      String
  description      String            @db.Text
  localisation     String?
  estResolue       Boolean           @default(false)
  dateResolution   DateTime?
  estValidee       Boolean           @default(false)
  estRejetee       Boolean           @default(false)
  raisonRejet      String?           @db.Text
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  coordonneesPlan  Json?
  planId           Int?
  numeroSequentiel Int?
  createdById      String?
  photos           PhotoRemarque[]
  createdBy        User?             @relation("RemarquesCreesParUser", fields: [createdById], references: [id])
  planAssocie      Document?         @relation("RemarqueSurPlan", fields: [planId], references: [id])
  reception        ReceptionChantier @relation(fields: [receptionId], references: [id], onDelete: Cascade)
  tags             TagRemarque[]

  @@unique([receptionId, numeroSequentiel])
  @@index([receptionId])
  @@index([planId])
  @@index([createdById])
  @@map("remarque_reception")
}

model PhotoRemarque {
  id         String            @id @default(uuid())
  remarqueId String
  url        String
  estPreuve  Boolean           @default(false)
  createdAt  DateTime          @default(now())
  remarque   RemarqueReception @relation(fields: [remarqueId], references: [id], onDelete: Cascade)

  @@index([remarqueId])
  @@map("photo_remarque")
}

model TagRemarque {
  id         String            @id @default(uuid())
  remarqueId String
  nom        String
  email      String?
  typeTag    String            @default("PERSONNE")
  remarque   RemarqueReception @relation(fields: [remarqueId], references: [id], onDelete: Cascade)

  @@index([remarqueId])
  @@map("tag_remarque")
}

model Chat {
  id           String            @id @default(uuid())
  name         String?
  isGroup      Boolean           @default(false)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  messages     ChatMessage[]
  participants ChatParticipant[]

  @@map("chat")
}

model ChatMessage {
  id        String   @id @default(uuid())
  chatId    String
  senderId  String
  content   String   @db.Text
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fileUrl   String?
  fileName  String?
  fileType  String?
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender    User     @relation(fields: [senderId], references: [id])

  @@index([chatId])
  @@index([senderId])
  @@map("chat_message")
}

model ChatParticipant {
  id         String    @id @default(uuid())
  chatId     String
  userId     String
  isAdmin    Boolean   @default(false)
  lastReadAt DateTime?
  joinedAt   DateTime  @default(now())
  chat       Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id])

  @@unique([chatId, userId])
  @@index([chatId])
  @@index([userId])
  @@map("chat_participant")
}

model SousTraitantPIN {
  id             String            @id @default(uuid())
  receptionId    String
  soustraitantId String?
  codePIN        String            @unique
  estInterne     Boolean           @default(false)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  reception      ReceptionChantier @relation(fields: [receptionId], references: [id], onDelete: Cascade)
  soustraitant   soustraitant?     @relation(fields: [soustraitantId], references: [id])

  @@index([receptionId])
  @@index([soustraitantId])
  @@map("soustraitant_pin")
}

// ==============================
// MÉTRÉS SOUS-TRAITANTS (PUBLIC)
// ==============================

enum MetreStatut {
  BROUILLON
  SOUMIS
  VALIDE
  PARTIELLEMENT_VALIDE
  REJETE
}

model MetreSoustraitant {
  id               String         @id @default(uuid())
  chantierId       String
  soustraitantId   String
  commandeId       Int?
  statut           MetreStatut    @default(BROUILLON)
  commentaire      String?        @db.Text
  piecesJointes    Json?          // URLs de fichiers
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Relations
  chantier         Chantier       @relation(fields: [chantierId], references: [chantierId], onDelete: Cascade)
  soustraitant     soustraitant   @relation(fields: [soustraitantId], references: [id], onDelete: Cascade)
  commande         CommandeSousTraitant? @relation(fields: [commandeId], references: [id])
  lignes           MetreLigne[]

  @@index([chantierId])
  @@index([soustraitantId])
  @@index([commandeId])
  @@map("metre_soustraitant")
}

model MetreLigne {
  id               String   @id @default(uuid())
  metreId          String
  // Lignes issues de la commande de base ou suppléments libres
  ligneCommandeId  Int?
  article          String
  description      String   @db.Text
  type             String   @default("QP")
  unite            String
  prixUnitaire     Float
  quantite         Float    @default(0)
  estSupplement    Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  metre            MetreSoustraitant @relation(fields: [metreId], references: [id], onDelete: Cascade)

  @@index([metreId])
  @@map("metre_ligne")
}

model Tag {
  id        String     @id @default(cuid())
  nom       String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  documents Document[] @relation("DocumentTags")

  @@map("tags")
}

// ===================================
// MODÈLES SAV
// ===================================

model TicketSAV {
  id                    String         @id @default(uuid())
  chantierId            String?
  numTicket             String         @unique // Format: SAV-YYYY-NNNN
  
  // Informations principales
  titre                 String
  nomLibre              String?        // Nom libre si pas de chantier associé
  description           String         @db.Text
  type                  TypeTicketSAV
  priorite              PrioriteSAV    @default(NORMALE)
  statut                StatutSAV      @default(NOUVEAU)
  
  // Localisation et contexte
  localisation          String?        // Description de l'emplacement
  adresseIntervention   String?        // Adresse précise d'intervention si hors chantier
  coordonnees           Json?          // Coordonnées GPS si disponibles
  
  // Planification
  dateDemande           DateTime       @default(now())
  dateInterventionSouhaitee DateTime?  // Date max souhaitée par le client
  datePlanifiee         DateTime?      // Date planifiée (pour calendrier futur)
  dateIntervention      DateTime?      // Date réelle d'intervention
  dateResolution        DateTime?      // Date de résolution du problème
  dateCloture           DateTime?      // Date de clôture définitive
  
  // Assignation (préparé pour le module calendrier futur)
  technicienAssignId    String?        // Technicien assigné (utilisateur interne existant)
  ouvrierInterneAssignId String?       // Ouvrier interne assigné (nouveau modèle)
  equipeAssignId        String?        // Équipe assignée (pour futur module)
  soustraitantAssignId  String?        // Sous-traitant assigné
  
  // Coûts (optionnel)
  coutEstime            Float?         @default(0)
  coutReel              Float?         @default(0)
  
  // Métadonnées
  createdBy             String
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt

  // Contact client
  contactNom            String?
  contactTelephone      String?
  contactEmail          String?
  
  // Relations
  chantier              Chantier?      @relation("ChantierTicketsSAV", fields: [chantierId], references: [chantierId], onDelete: Cascade)
  technicienAssign      User?          @relation("TicketsSAVTechnicien", fields: [technicienAssignId], references: [id])
  ouvrierInterneAssign  OuvrierInterne? @relation("TicketsSAVOuvrierInterne", fields: [ouvrierInterneAssignId], references: [id])
  soustraitantAssign    soustraitant?  @relation("TicketsSAVSousTraitant", fields: [soustraitantAssignId], references: [id])
  createdByUser         User           @relation("TicketsSAVCreatedBy", fields: [createdBy], references: [id])
  
  // Sous-éléments
  interventions         InterventionSAV[]
  documents             DocumentSAV[]
  photos                PhotoSAV[]
  commentaires          CommentaireSAV[]
  // Planning ressources (liens éventuels)
  tasks                 Task[]
  
  @@index([chantierId])
  @@index([statut])
  @@index([technicienAssignId])
  @@index([ouvrierInterneAssignId])
  @@index([soustraitantAssignId])
  @@index([createdBy])
  @@map("ticket_sav")
}

// ===================================
// PLANNING RESSOURCES
// ===================================

enum TaskStatus {
  PREVU
  EN_COURS
  TERMINE
}

model Task {
  id             String        @id @default(cuid())
  title          String
  description    String?
  start          DateTime
  end            DateTime
  status         TaskStatus    @default(PREVU)
  chantierId     String?
  savTicketId    String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  chantier       Chantier?     @relation(fields: [chantierId], references: [chantierId])
  savTicket      TicketSAV?    @relation(fields: [savTicketId], references: [id])
  ouvriersInternes TaskOuvrierInterne[]
  sousTraitants    TaskSousTraitant[]
  documents        TaskDocument[]

  @@index([start])
  @@index([end])
  @@index([chantierId])
  @@index([savTicketId])
  @@map("task")
}

model TaskOuvrierInterne {
  id               String         @id @default(cuid())
  taskId           String
  ouvrierInterneId String
  assignedAt       DateTime       @default(now())

  task             Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  ouvrierInterne   OuvrierInterne @relation(fields: [ouvrierInterneId], references: [id])

  @@unique([taskId, ouvrierInterneId])
  @@index([ouvrierInterneId])
  @@map("task_ouvrier_interne")
}

model TaskSousTraitant {
  id             String       @id @default(cuid())
  taskId         String
  soustraitantId String
  assignedAt     DateTime     @default(now())

  task           Task         @relation(fields: [taskId], references: [id], onDelete: Cascade)
  soustraitant   soustraitant @relation(fields: [soustraitantId], references: [id])

  @@unique([taskId, soustraitantId])
  @@index([soustraitantId])
  @@map("task_soustraitant")
}

model TaskDocument {
  id        String   @id @default(cuid())
  taskId    String
  url       String
  name      String
  mimeType  String
  size      Int?
  createdAt DateTime @default(now())

  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@map("task_document")
}

model InterventionSAV {
  id                    String         @id @default(uuid())
  ticketSAVId           String
  
  // Informations de l'intervention
  titre                 String
  description           String         @db.Text
  type                  TypeInterventionSAV @default(DIAGNOSTIC)
  statut                StatutInterventionSAV @default(PLANIFIEE)
  
  // Timing
  dateDebut             DateTime
  dateFin               DateTime?
  dureeReelleMinutes    Int?
  
  // Intervenant
  technicienId          String
  equipeId              String?        // Pour futur module équipes
  
  // Matériels et coûts
  materielsUtilises     String?        @db.Text
  coutMateriel          Float?         @default(0)
  coutMainOeuvre        Float?         @default(0)
  
  // Résultat
  resultat              String?        @db.Text
  prochainAction        String?        @db.Text
  
  // Métadonnées
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  
  // Relations
  ticketSAV             TicketSAV      @relation(fields: [ticketSAVId], references: [id], onDelete: Cascade)
  technicien            User           @relation("InterventionsSAVTechnicien", fields: [technicienId], references: [id])
  
  // Sous-éléments
  photos                PhotoInterventionSAV[]
  
  @@index([ticketSAVId])
  @@index([technicienId])
  @@index([dateDebut])
  @@map("intervention_sav")
}

model DocumentSAV {
  id                    String         @id @default(uuid())
  ticketSAVId           String
  
  // Informations du fichier
  nom                   String
  nomOriginal           String
  url                   String
  taille                Int
  mimeType              String
  type                  TypeDocumentSAV @default(AUTRE)
  
  // Description
  description           String?        @db.Text
  
  // Métadonnées
  uploadedBy            String
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  
  // Relations
  ticketSAV             TicketSAV      @relation(fields: [ticketSAVId], references: [id], onDelete: Cascade)
  uploadedByUser        User           @relation("DocumentsSAVUploadedBy", fields: [uploadedBy], references: [id])
  
  @@index([ticketSAVId])
  @@index([uploadedBy])
  @@map("document_sav")
}

model PhotoSAV {
  id                    String         @id @default(uuid())
  ticketSAVId           String
  
  // Informations de la photo
  url                   String
  nomOriginal           String?
  description           String?        @db.Text
  type                  TypePhotoSAV   @default(CONSTAT)
  
  // Métadonnées géospatiales
  coordonnees           Json?          // Coordonnées GPS
  orientation           Float?         // Orientation de la photo
  
  // Métadonnées
  prisePar              String
  createdAt             DateTime       @default(now())
  
  // Relations
  ticketSAV             TicketSAV      @relation(fields: [ticketSAVId], references: [id], onDelete: Cascade)
  prisParUser           User           @relation("PhotosSAVPrisesPar", fields: [prisePar], references: [id])
  
  @@index([ticketSAVId])
  @@index([prisePar])
  @@map("photo_sav")
}

model PhotoInterventionSAV {
  id                    String         @id @default(uuid())
  interventionSAVId     String
  
  // Informations de la photo
  url                   String
  nomOriginal           String?
  description           String?        @db.Text
  type                  TypePhotoSAV   @default(CONSTAT)
  
  // Moment de la prise
  momentPrise           MomentPhotoIntervention @default(PENDANT)
  
  // Métadonnées
  prisePar              String
  createdAt             DateTime       @default(now())
  
  // Relations
  intervention          InterventionSAV @relation(fields: [interventionSAVId], references: [id], onDelete: Cascade)
  prisParUser           User           @relation("PhotosInterventionSAVPrisesPar", fields: [prisePar], references: [id])
  
  @@index([interventionSAVId])
  @@index([prisePar])
  @@map("photo_intervention_sav")
}

model CommentaireSAV {
  id                    String         @id @default(uuid())
  ticketSAVId           String
  
  // Contenu
  contenu               String         @db.Text
  type                  TypeCommentaireSAV @default(COMMENTAIRE)
  estInterne            Boolean        @default(false) // Visible uniquement par l'équipe
  
  // Métadonnées
  auteurId              String
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  
  // Relations
  ticketSAV             TicketSAV      @relation(fields: [ticketSAVId], references: [id], onDelete: Cascade)
  auteur                User           @relation("CommentairesSAVAuteur", fields: [auteurId], references: [id])
  
  @@index([ticketSAVId])
  @@index([auteurId])
  @@map("commentaire_sav")
}

// ===================================
// ENUMS
// ===================================

enum TypeTicketSAV {
  DEFAUT_CONFORMITE     // Défaut de conformité
  MALFACON              // Malfaçon
  USURE_PREMATUREE      // Usure prématurée
  MAINTENANCE           // Maintenance préventive
  REPARATION            // Réparation
  RETOUCHE              // Retouche esthétique
  AUTRE                 // Autre type
}

enum PrioriteSAV {
  CRITIQUE              // Intervention immédiate
  HAUTE                 // Dans les 24h
  NORMALE               // Dans la semaine
  BASSE                 // Planifiable
}

enum StatutSAV {
  NOUVEAU               // Ticket créé
  EN_ATTENTE            // En attente d'assignation
  ASSIGNE               // Assigné à un technicien
  PLANIFIE              // Intervention planifiée
  EN_COURS              // Intervention en cours
  EN_ATTENTE_PIECES     // En attente de pièces/matériaux
  EN_ATTENTE_VALIDATION // En attente validation client
  RESOLU                // Problème résolu
  CLOS                  // Ticket définitivement clos
  ANNULE                // Ticket annulé
}

enum TypeInterventionSAV {
  DIAGNOSTIC            // Diagnostic du problème
  REPARATION            // Réparation
  REMPLACEMENT          // Remplacement d'élément
  RETOUCHE              // Retouche/finition
  MAINTENANCE           // Maintenance préventive
  CONTROLE              // Contrôle qualité
}

enum StatutInterventionSAV {
  PLANIFIEE             // Intervention planifiée
  EN_COURS              // En cours de réalisation
  TERMINEE              // Intervention terminée
  REPORTEE              // Reportée
  ANNULEE               // Annulée
}

enum TypeDocumentSAV {
  FACTURE               // Facture
  DEVIS                 // Devis
  RAPPORT               // Rapport d'intervention
  PLAN                  // Plan/schéma
  FICHE_TECHNIQUE       // Fiche technique
  AUTRE                 // Autre document
}

enum TypePhotoSAV {
  CONSTAT               // Photo de constat du problème
  AVANT_INTERVENTION    // Avant intervention
  PENDANT_INTERVENTION  // Pendant intervention
  APRES_INTERVENTION    // Après intervention
  DETAIL                // Détail technique
  VUE_ENSEMBLE          // Vue d'ensemble
}

enum MomentPhotoIntervention {
  AVANT                 // Avant l'intervention
  PENDANT               // Pendant l'intervention
  APRES                 // Après l'intervention
}

enum TypeCommentaireSAV {
  COMMENTAIRE           // Commentaire général
  NOTE_TECHNIQUE        // Note technique
  INSTRUCTION           // Instruction pour intervention
  FEEDBACK_CLIENT       // Retour client
  NOTE_INTERNE          // Note interne équipe
}

enum pret_statut {
  EN_COURS
  TERMINE
}

// ===================================
// MODÈLES JOURNAL OUVRIER
// ===================================

model JournalOuvrier {
  id                String    @id @default(uuid())
  ouvrierId         String
  date              DateTime  @db.Date
  heureDebut        String    // Format HH:MM
  heureFin          String    // Format HH:MM
  chantierId        String?   // Si travail sur chantier
  lieuLibre         String?   // Si lieu libre (déplacement, etc.)
  description       String    @db.Text
  photos            Json?     // Array d'URLs des photos
  estValide         Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  modifiableJusquA  DateTime  // Date limite de modification (+48h)
  
  // Relations
  ouvrier           OuvrierInterne @relation("JournalOuvrier", fields: [ouvrierId], references: [id], onDelete: Cascade)
  chantier          Chantier?      @relation("JournalChantier", fields: [chantierId], references: [chantierId], onDelete: SetNull)
  
  @@index([ouvrierId])
  @@index([date])
  @@index([estValide])
  @@map("journal_ouvrier")
}

// Modèles pour la planification des chargements
model Pays {
  id        String   @id @default(uuid())
  nom       String   @unique
  code      String   @unique // FR, ES, IT, etc.
  icone     String?  // 🇫🇷, 🇪🇸, 🇮🇹, etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  usines Usine[]
  
  @@map("pays")
}

model Usine {
  id        String   @id @default(uuid())
  nom       String
  paysId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  pays        Pays           @relation(fields: [paysId], references: [id], onDelete: Cascade)
  chargements Chargement[]
  
  @@unique([nom, paysId])
  @@map("usine")
}

model Chargement {
  id              String    @id @default(uuid())
  usineId         String
  contenu         String    // Poids, référence commande, ou les deux
  semaine         Int       // 1, 2, 3, 4...
  estCharge       Boolean   @default(false)
  dateCreation    DateTime  @default(now())
  dateChargement  DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  usine Usine @relation(fields: [usineId], references: [id], onDelete: Cascade)
  
  @@index([usineId])
  @@index([semaine])
  @@index([estCharge])
  @@map("chargement")
}

enum User_role {
  ADMIN
  MANAGER
  USER
  BOT
}

enum Machine_statut {
  DISPONIBLE
  PRETE
  EN_PANNE
  EN_REPARATION
  MANQUE_CONSOMMABLE
}

// Tables NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtoken")
}

// Modèle pour le stockage vectoriel RAG
model documentChunk {
  id        String   @id @default(cuid())
  content   String   @db.Text
  metadata  String   @db.Text // JSON stringifié
  embedding String?  @db.Text // JSON stringifié du vecteur
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("documentchunks")
}

model ragConversation {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  String   @db.LongText // JSON stringifié des messages
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ragconversations")
}

model ContractTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  htmlContent String   @db.LongText
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("contract_templates")
}

// Photos envoyées par les utilisateurs externes (ouvriers et sous-traitants)
model PhotoExterne {
  id              String            @id @default(uuid())
  chantierId      String
  uploadedBy      String            // ID de l'ouvrier/sous-traitant
  uploadedByType  PublicSubjectType // OUVRIER_INTERNE | SOUSTRAITANT
  uploadedByName  String            // Nom pour affichage (évite les jointures)
  urls            String            @db.Text // JSON array des URLs des photos
  description     String?           @db.Text
  dateUpload      DateTime          @default(now())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  chantier        Chantier          @relation(fields: [chantierId], references: [chantierId], onDelete: Cascade)

  @@index([chantierId])
  @@index([uploadedBy])
  @@index([dateUpload])
  @@map("photos_externes")
}

// Choix client - Pour enregistrer les choix de carrelage en showroom
model ChoixClient {
  id                  String        @id @default(uuid())
  chantierId          String?       // Peut être null si pas encore associé à un chantier
  nomClient           String
  telephoneClient     String?
  emailClient         String?
  dateVisite          DateTime      @default(now())
  statut              StatutChoix   @default(BROUILLON)
  planOriginal        String?       // URL du plan importé (PDF/image)
  planAnnote          String?       // URL de l'image générée avec zones colorées
  planAnnoteData      Json?         // Données vectorielles SVG de toutes les zones dessinées
  notesGenerales      String?       @db.Text
  documents           Json?         // Array d'URLs de fichiers joints (catalogues, etc.)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  createdBy           String
  
  // Relations
  chantier            Chantier?     @relation(fields: [chantierId], references: [chantierId], onDelete: SetNull)
  user                User          @relation(fields: [createdBy], references: [id])
  detailsChoix        DetailChoix[]
  
  @@index([chantierId])
  @@index([createdBy])
  @@index([dateVisite])
  @@index([statut])
  @@map("choix_clients")
}

// Détails de chaque choix produit dans un ChoixClient
model DetailChoix {
  id                  String        @id @default(uuid())
  choixClientId       String
  numeroChoix         Int           // Ordre d'affichage (1, 2, 3...)
  couleurPlan         String        // Code couleur hex pour le repérage sur le plan (#0066FF)
  localisations       Json          // Array de localisations ["Séjour", "Cuisine", ...]
  type                TypePose      @default(SOL)
  
  // Produit
  marque              String
  collection          String?
  modele              String
  reference           String?
  couleur             String?
  formatLongueur      Decimal?      @db.Decimal(10, 2) // en cm
  formatLargeur       Decimal?      @db.Decimal(10, 2) // en cm
  epaisseur           Decimal?      @db.Decimal(10, 2) // en mm
  finition            FinitionCarrelage?
  surfaceEstimee      Decimal?      @db.Decimal(10, 2) // en m²
  
  // Joints
  couleurJoint        String?
  largeurJoint        Decimal?      @db.Decimal(10, 2) // en mm
  typeJoint           TypeJoint?
  
  // Pose
  typePose            String?       // "Droite", "Diagonale", etc.
  sensPose            String?
  particularitesPose  String?       @db.Text
  
  // Médias et notes
  photosShowroom      Json?         // Array d'URLs de photos prises en showroom
  notes               String?       @db.Text
  
  // Dessin sur plan - données vectorielles de la zone dessinée
  zoneDessineeData    Json?         // SVG paths/shapes pour cette zone spécifique
  
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  
  // Relations
  choixClient         ChoixClient   @relation(fields: [choixClientId], references: [id], onDelete: Cascade)
  
  @@index([choixClientId])
  @@index([numeroChoix])
  @@map("details_choix")
}

// Enums pour les choix clients
enum StatutChoix {
  BROUILLON
  PRE_CHOIX
  CHOIX_DEFINITIF
}

enum TypePose {
  SOL
  MUR
  DECOR
}

enum FinitionCarrelage {
  BRILLANT
  MAT
  SATINE
  STRUCTURE
  POLI
  ANTIDERAPANT
}

enum TypeJoint {
  EPOXY
  CIMENT
  SILICONE
  POLYURETHANE
}
